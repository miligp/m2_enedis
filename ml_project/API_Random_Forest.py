from flask import Flask, request, jsonify
import pickle
import pandas as pd
import numpy as np 
from joblib import load
import os 
import pathlib 

# -----------------------------
# CONFIGURATION DES FICHIERS
# -----------------------------


app_dpe = Flask(__name__)

# 1. D√âTERMINER LE R√âPERTOIRE ACTUEL DU FICHIER API
CURRENT_DIR = pathlib.Path(__file__).parent 

# 2. D√âFINIR LE R√âPERTOIRE CONTENANT LES MOD√àLES
# üö® CORRECTION D√âFINITIVE : Si l'API et le mod√®le sont dans le m√™me dossier,
# le r√©pertoire des mod√®les est le r√©pertoire courant du script.
MODELS_DIR = CURRENT_DIR 


# Les chemins absolus des fichiers de mod√®les
MODEL_FILE = MODELS_DIR / 'random_forest_dpe_final_weighted.joblib'
COLUMNS_FILE = MODELS_DIR / 'feature_columns_final.pkl'

model = None
FEATURE_COLUMNS = []

# --- D√âFINITION DU PR√â-TRAITEMENT (CRITIQUE) ---

ORDINAL_CATEGORIES = {
    # L'ordre est CRITIQUE : 0 pour Insuffisante, 3 pour tr√®s bonne
    'qualite_isolation_murs': ['Insuffisante', 'Moyenne', 'bonne', 'tr√®s bonne'], 
    'nombre_appartement_cat': [
        'Maison(Unitaire ou 2 √† 3 logements)',
        'Petit Collectif(4 √† 9 logements)',
        'Moyen Collectif(10 √† 30 logements)',
        'Grand Collectif(> 30 logements)'
    ]
}

def load_dpe():
    global model, FEATURE_COLUMNS
    try:
        # 1. Charger le mod√®le et la liste des colonnes
        model = load(MODEL_FILE)
        with open(COLUMNS_FILE, 'rb') as f:
            FEATURE_COLUMNS = pickle.load(f)
        
        print("Mod√®le DPE (Classification) charg√© avec succ√®s.")

    except FileNotFoundError as e:
        print(f"ERREUR FATALE: Fichier non trouv√© lors du chargement: {e}. Le mod√®le ne sera pas disponible.")
        # Le mod√®le est mis √† None si le chargement √©choue.
        model = None
    except Exception as e:
        print(f"ERREUR FATALE DPE : {e}")
        model = None

load_dpe() 


@app_dpe.route('/predict_dpe', methods=['POST'])
def predict_dpe():
    if model is None:
        return jsonify({"error": "Mod√®le DPE non charg√© ou non disponible."}), 503
    
    try:
        data = request.get_json(force=True)
    except Exception:
        return jsonify({"error": "Format JSON invalide ou manquant."}), 400

    try:
        input_df = pd.DataFrame([data])
        df_processed = input_df.copy()
        
        # 2. PR√â-TRAITEMENT MANUEL (Reproduire l'ordre et les √©tapes du Notebook)
        
        # A. Encodage Ordinal
        for col, categories in ORDINAL_CATEGORIES.items():
            # Remplace les valeurs cat√©gorielles par leur index (0, 1, 2, ...)
            mapping = {category: i for i, category in enumerate(categories)}
            df_processed[col] = df_processed[col].map(mapping).fillna(-1) 
        
        # B. Encodage One-Hot des autres variables (Ex: periode_construction)
        # Note : pandas.get_dummies() est simple mais peut cr√©er des probl√®mes de colonnes manquantes
        df_processed = pd.get_dummies(df_processed, drop_first=False) 
        
        # 3. Cr√©ation de la matrice finale pour le mod√®le
        X_final = pd.DataFrame(0, index=[0], columns=FEATURE_COLUMNS)

        # Remplissage de la ligne finale avec les colonnes trait√©es et align√©es
        for col in df_processed.columns:
            if col in X_final.columns:
                X_final.loc[0, col] = df_processed.loc[0, col]
        
        # 4. Pr√©diction
        prediction_numpy = model.predict(X_final)[0]
        prediction_DPE = int(prediction_numpy) 

        # 5. Renvoyer le r√©sultat
        return jsonify({
            "prediction_DPE_index": prediction_DPE 
        }), 200

    except Exception as e:

        print(f"Erreur interne lors du pr√©-traitement : {str(e)}")
        return jsonify({f"Erreur lors de la pr√©diction : {str(e)}"}), 500


if __name__ == '__main__':
    # Lancez cette API sur le port 5001
    app_dpe.run(host='0.0.0.0', port=5001, debug=True)
